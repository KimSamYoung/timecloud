<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%><%@page import="com.twobrain.common.session.UserMonitor"%>
<%@ page import="com.twobrain.common.core.DataSet"%>
<%@ page import="com.twobrain.common.core.QueryHandler"%>
<%@ page import="com.twobrain.common.util.RequestHelper"%>
<%@ page import="com.twobrain.common.util.JavaScript" %>
<%@ page import="com.twobrain.common.util.DateTime"%>
<%@ page import="com.twobrain.common.session.UserSession" %>
<%@ page import="com.twobrain.common.config.Config" %>
<%@ page import="com.twobrain.common.constants.Cs" %>
<%@ page import="com.twobrain.common.util.MultiPartRequestHelper"%>
<%@ page import="com.twobrain.common.util.HTMLEntities" %>
<%@ page import="com.twobrain.common.util.NotificationService" %>
<%@ page import="com.twobrain.common.util.Util" %>
<%@ page import="java.util.Vector,java.util.regex.*" %>
<%
	final String CONTEXT_PATH = request.getContextPath();
	final String CONTEXT_REAL_PATH = request.getRealPath(CONTEXT_PATH);
	final String JS_PATH = CONTEXT_PATH + "/html/js";
	final String CSS_PATH = CONTEXT_PATH + "/html/css";
	final String IMG_PATH = CONTEXT_PATH + "/html/images";
	final String AXISJ_PATH = CONTEXT_PATH + "/html/axisj";
	final String NOTIFICATION_SERVER_URL = Config.getProperty("init", "NOTIFICATION_SERVER_URL");
	
	// --
	final String SNS_YAMMER = "YM";
	final String SNS_GC = "GC";
	
	String CLIENT_ID = "";
	String CLIENT_SECRET = "";
	
	String sHostName = request.getRequestURL().toString();

	// -- For Developing
	if(sHostName.contains("localhost")) {
		sHostName = "http://dev.2brain.com";
	}
	
	sHostName = sHostName.replace("http://","");
	
	int startIndex = sHostName.indexOf('.') + 1;
	int endIndex = sHostName.indexOf(':');
	
	if(endIndex == -1) {
		endIndex = sHostName.indexOf('/');
		if(endIndex == -1) {
			endIndex = sHostName.length();
		}
	}
	
	sHostName = sHostName.substring(startIndex, endIndex);
%><%!
// -- Util Class
	public static String stringToHTMLString(String string) {
	    StringBuffer sb = new StringBuffer(string.length());
	    // true if last char was blank
	    boolean lastWasBlankChar = false;
	    int len = string.length();
	    char c;
	
	    for (int i = 0; i < len; i++)
	        {
	        c = string.charAt(i);
	        if (c == ' ') {
	            // blank gets extra work,
	            // this solves the problem you get if you replace all
	            // blanks with &nbsp;, if you do that you loss 
	            // word breaking
	            if (lastWasBlankChar) {
	                lastWasBlankChar = false;
	                sb.append("&nbsp;");
	                }
	            else {
	                lastWasBlankChar = true;
	                sb.append(' ');
	                }
	            }
	        else {
	            lastWasBlankChar = false;
	            //
	            // HTML Special Chars
	            /*
	            if (c == '"')
	                sb.append("&quot;");
	            else if (c == '\'')	// -- single quotation
	            	sb.append("&#39;") ;
	            else if (c == ',')
	            	sb.append("&#44") ; 	// -- comma - flash chart
	            else if (c == '&')
	                sb.append("&amp;");
	           */
	            if (c == '\n') {
	                // Handle Newline
	                //sb.append("&lt;br/&gt;");
	            	sb.append("<br />") ;
	            }
	            else if (c == '<')
	                sb.append("&lt;");
	            else if (c == '>')
	                sb.append("&gt;");
	            else {
	                int ci = 0xffff & c;
	                if (ci < 160 )
	                    // nothing special only 7 Bit
	                    sb.append(c);
	                else {
	                    // Not 7 Bit use the unicode system
	                    sb.append("&#");
	                    sb.append(new Integer(ci).toString());
	                    sb.append(';');
	                    }
	                }
	            }
	        }
	    return sb.toString();
	}
	
	// -- TODO - ProfileImage Class 필요 - 태스크 온/오프 사용자 표시, 사용자 온/오프 표시 일괄처리 필요 
	
	public static String getProfileImage(String domain, int n_owner_idx) {
		return getProfileImage(domain, n_owner_idx, 50,"", false) ;
	}

	public static String getProfileImage(String domain, int n_owner_idx, boolean isGrayScale) {
		return getProfileImage(domain, n_owner_idx, 50,"", isGrayScale) ;
	}
	
	public static String getProfileImage(String domain, int n_owner_idx, int width, boolean isGrayScale) {
		return getProfileImage(domain, n_owner_idx, width, "", isGrayScale) ;
	}
	
	public static String getProfileImage(String domain, int n_owner_idx, int width) {
		return getProfileImage(domain, n_owner_idx, width, "", false) ;
	}
	
	public static String getProfileImage(String domain, int n_owner_idx, int width, String imageShape) {
		return getProfileImage(domain, n_owner_idx, width, "", false) ;
	}
	
	public static String getProfileImage(String domain, int n_owner_idx, int width, String imageShape, boolean isGrayScale) {
		if( domain == null || n_owner_idx <=0)return null ;
		if(width<=0)width=50 ;
		
		if(imageShape == null || "".equals(imageShape)) imageShape = ImageShape.NORMAL ;	// -- rounded, polaroid, circle
		
		String sUserInfo = "";
		
		if(isGrayScale) {
			sUserInfo = String.format(Config.getProperty("init", Cs.USER_PROFILE_IMAGE_URN), domain, n_owner_idx + "_g", domain) ;
		} else {
			sUserInfo = String.format(Config.getProperty("init", Cs.USER_PROFILE_IMAGE_URN), domain, n_owner_idx, domain) ;
		}
		
		return String.format("<img src='%s' onerror=\"this.src='/html/images/avatar.png'\" class='%s' width='%spx' height='%spx' />", sUserInfo, imageShape, width, width) ;
	}
	
	public static String getProfileImageUrl(String domain, int n_owner_idx) {
		return String.format(Config.getProperty("init", Cs.USER_PROFILE_IMAGE_URN), domain, n_owner_idx, domain) ;
	}
	
	public static class ImageShape {
		public static final String NORMAL = "" ;
		public static final String ROUNDED = "img-rounded" ;
		public static final String POLAROID = "img-polaroid" ;
		public static final String CIRCLE = "img-circle" ;
	}
	
	
	// -- ë³¸ë¬¸ ë§í¬ ê¸°ë¥
	public static String addLink(String src) {
		String regex = "([\\p{Alnum}]+)://([a-z0-9.\\-&/%=?:@#$(),.+;~\\_]+)";
		
		Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
		Matcher m = p.matcher(src);
		
		String result = "";
		
		if(src.contains("https")) {
			result = m.replaceAll("<a href='https://$2' target=_blank>https://$2</a>");
		} else {
			result = m.replaceAll("<a href='http://$2' target=_blank>http://$2</a>");
		}
		
		return result ;
	}	
%><%!
// -- KPI - wrapper functions
public String getTaskRank(UserSession oUserSession) {
	return getRankTable(oUserSession, "KPI_TASK_RANK") ;
}

public String getTaskAssginRank(UserSession oUserSession) {
	return getRankTable(oUserSession, "KPI_TASK_ASSIGN_RANK") ;
}

public String getFeedbackRankTable(UserSession oUserSession){
	return getRankTable(oUserSession, "KPI_FEEDBACK_RANK") ; 
}

public String getFileRankTable(UserSession oUserSession){	// --íã£ãã¹ìë¡ë ë­í¹
	return getRankTable(oUserSession, "KPI_FILE_RANK") ; 
}

public String getActivityRankTable(UserSession oUserSession){	// -- ì¡í°ë¹í° ë±ë¡ ë­í¹
	return getRankTable(oUserSession, "KPI_ACTIVITY_RANK") ; 
}

public String getObserverRankTable(UserSession oUserSession){	// -- ì°¸ì¡°ì í ë¹ë ë­í¹
	return getRankTable(oUserSession, "KPI_OBSERVER_RANK") ; 
}

// --
public String getRankTable(UserSession oUserSession, String query){
	return getRankTable(oUserSession, query, null) ;	
}
// -- ì¤ì  ì²ë¦¬ë¶
public String getRankTable(UserSession oUserSession, String query, String[] params ){
	DataSet dsRank = null ;
	if(params != null)dsRank = QueryHandler.executeQuery(query,params) ;
	else dsRank = QueryHandler.executeQuery(query) ;
	
	StringBuffer rankImages = new StringBuffer() ;
	StringBuffer rankTitles = new StringBuffer() ;
	String rankTable = null ;
	
	String[] rankCaption = {"1st","2nd","3rd","4th","5th","6th","7th","8th","9th","10th"} ;
	int rank = 0 ;
	// -- System.out.println("size = "+dsRank.size())	 ;
	if(dsRank != null && dsRank.size()>0) {
		while(dsRank.next() && rank<rankCaption.length){	// --
			rankImages.append("<td align=center>" + getProfileImage( oUserSession.getDomainIdx(), dsRank.getInt(1), 30 ) + "</td>" );
			rankTitles.append("<td align=center><small>" + rankCaption[rank++] +"("+dsRank.getInt(2)+")</small></td>") ;
		}
		
		rankTable = "<table><tr>"+rankImages.toString()+"</tr>"
					+"<tr>"+rankTitles.toString()+"</tr></table>" ;
	}
	else rankTable = "No rank Info .." ;	
	
	return rankTable ;
}
%><%! // UPDATE TASK METHOD
public static void setTaskUpdateTime(final int taskIdx) {
	if(taskIdx <=0)return ;
	if( QueryHandler.executeUpdate("UPDATE_TASK_EDIT_DATETIME", taskIdx) <= 0){
		// -- fail to update edt time	
	}
}

private String getNotification(UserSession oUserSession, String Class) {
	// -- notification
	int notifiCount = 20;
	DataSet ds = QueryHandler.executeQuery("TEST_SELECT_MYNOTIFICATION", oUserSession.getUserIdx()) ;

	StringBuffer result = new StringBuffer() ;
	String desc, timegap, v_tbl_nm ;
	int task_idx, creator_idx, n_tbl_idx ;
	int i = 0;
	String msg = "" ;
	if(ds != null && ds.size()>0) {
		while(i++ < notifiCount) {
			ds.next();
			task_idx = ds.getInt(1) ;
			desc = ds.getString(2) ;
			creator_idx = ds.getInt(3) ;
			timegap = ds.getString(4) ;
			v_tbl_nm = ds.getString(5) ;
			n_tbl_idx = ds.getInt(6) ;
			
			if("TIMECLOUD_FEEDBACK".equals(v_tbl_nm)){
				msg = "%s님이 피드백을 남기셨습니다." ; 
			}
			else if("TIMECLOUD_ACTIVITY".equals(v_tbl_nm)){
				msg = "%s님이 일정을 등록하셨습니다." ;
			}
			else if("TIMECLOUD_FILE".equals(v_tbl_nm)){
				msg = "%s님이 파일을 업로드하였습니다." ;
			}
			else if("TIMECLOUD_TASK".equals(v_tbl_nm)){
				msg = "%s님이 태스크를 할당하였습니다." ; 
			}
			else {}
			
			String sProfileImageSrc = getProfileImageSrc(oUserSession,creator_idx) ;
			result.append(
				Html.li(
				    Html.a(Html.img_("class='media-object' src='"+sProfileImageSrc+"' width=50"),"class='pull-left'" )+
				    Html.div(
				      Html.div( Html.a( desc,"href='/jsp/task.jsp?tsk_idx="+task_idx+"'") )
					,"class='media-body messageBody'") 
				,"class='media' ")
			);
		}
	}
	
	String Loading = "<div id='notificationLoading' style='display:none'>" + 
					 	"<p style='text-align:center;'><img src='/html/images/loading.gif'/></p>" +
					 "</div>";
	
	return  "<div class='"+Class+"' style='margin-left:0px;position:fixed;top:0px;right:0px' listCount='" + notifiCount + "'> "  + Html.ul( result.toString() ,"class='media-list'") + Loading +  "</div>";
}

public static String getProfileImageSrc(UserSession oUserSession, int n_owner_idx) {
	return String.format(
			Config.getProperty("init", Cs.USER_PROFILE_IMAGE_URN)
			, oUserSession.getDomainIdx()
			, n_owner_idx) ;
}

// -- 
private String getVertNav(RequestHelper req, UserSession oUserSession) {
	final String type = req.getParam("type", "") ;
	final int idx = req.getIntParam("idx", -1)	 ;
	String homeActive = "", calendarActive = "", feedbackActive = "", fileActive = "", taskActive = "" ;
	
	int pIdx=-1, rIdx=-1, fIdx = -1 ;
	if("RECENTLY".equals(type))	{
		rIdx = idx ;
	}
	else if("FAVORITE".equals(type))	{
		fIdx = idx ;
	}
	else if("PROJECT".equals(type))	{
		pIdx = idx ;
	}
	else {
		HttpServletRequest request = req.getRequestObject() ;
		String url = request.getRequestURL().toString() ;
		
		int pos = url.lastIndexOf('/') ;
		if(pos >0) {
			String urn = url.substring(pos+1) ;
			if(urn.equals("main.jsp")) homeActive = "active" ;
			else if(urn.equals("feedbackAll.jsp")) feedbackActive = "active" ;
			else if(urn.equals("calendarAll.jsp")) calendarActive = "active" ;
			else if(urn.equals("fileAll.jsp")) fileActive = "active" ;
			else if(urn.equals("taskList.jsp")) taskActive = "active" ;
		}
	}
	
	final int myIdx = oUserSession.getUserIdx() ;
	DataSet ds = QueryHandler.executeQuery("TEST_SELECT_PROJECT_ON", myIdx) ;
	String myProject = getLi(ds,"PROJECT",pIdx) ;
	
	// ds = QueryHandler.executeQuery("TEST_SELECT_MYFAVORITE", myIdx) ;
	String myFavorite = getLiFavorite(myIdx, req) ; //getLi(ds,"FAVORITE",fIdx) ;
	String myRecently = getLiRecently(myIdx, req) ;	
	
	return Html.ul(
		Html.li(Html.a(Html.Icon.HOME+"Home","href='/'"),"class='"+homeActive+"'")
		+Html.li(Html.a(Html.Icon.ACTIVITY+"Calendar","href='/jsp/calendarAll.jsp'"),"class='"+calendarActive+"'")
		+Html.li(Html.a(Html.Icon.FEEDBACK+"Feedback","href='/jsp/feedbackAll.jsp'"),"class='"+feedbackActive+"'")
		+Html.li(Html.a(Html.Icon.FILE+"File","href='/jsp/fileAll.jsp'"),"class='"+fileActive+"'")
		+Html.li(Html.a(Html.Icon.TASK+"Task","href='/jsp/taskList.jsp'"),"class='"+taskActive+"'")
		+Html.li("","class='divider'")
		+Html.li(Html.Icon.FAVORITE+"Favorite","class='nav-header'")
		+myFavorite
		+Html.li("","class='divider'")
		+Html.li("Project","class='nav-header'")
		+myProject
		+Html.li("","class='divider'")
		+Html.li("Recently","class='nav-header'")
		+myRecently
		+Html.li("","class='divider'")
	,"class='nav nav-list'") ;
}

/*
private String getTypeFromTable(String v_tbl_nm) {	// -- TODO -  임시.. 도구코드로 통일예정 
	if("TIMECLOUD_TASK".equals(v_tbl_nm)) {
		return "TASK" ;
	}
	else if("TIMECLOUD_ACTIVITY".equals(v_tbl_nm)) {
		return "ACTIVITY" ;
	}
	else if("TIMECLOUD_FILE".equals(v_tbl_nm)) {
		return "FILE" ;
	}
	else if("TIMECLOUD_FEEDBACK".equals(v_tbl_nm)) {
		return "FEEDBACK" ;
	}
	else return "" ;
}
*/

private String getLiFavorite(int myIdx,RequestHelper req) {
	DataSet ds = QueryHandler.executeQuery("TEST_SELECT_MYFAVORITE", myIdx) ;
	if(ds == null)return "" ;
	
	final String type = req.getParam("type", "") ;
	final int idx = req.getIntParam("idx", -1)	 ;	
	boolean isSelectedType = "FAVORITE".equals(type) ; 
	
	StringBuffer buf = new StringBuffer() ;
	int n_idx, task_idx, n_tbl_idx ;
	String desc ; 
	String active = "" ;
	
	while(ds.next()) {
		n_idx = ds.getInt(1) ; // -- favorite idx
		task_idx = ds.getInt(2) ;
		desc = ds.getString(3) ;
		
		if(isSelectedType && idx == n_idx) active = "active" ;
		else active = "" ;
			
		buf.append(
			String.format("<li class='%s'><a id='FAVORITE_%d' class='ellipsis' href='/jsp/task.jsp?tsk_idx=%d&type=FAVORITE&idx=%d'>%s</a></li>"
			, active, n_idx, task_idx, n_idx, desc)
		) ;
	}
	
	return buf.toString() ;
}
// -- for tool snap list (main tool snap & task noti)
private String getLi(DataSet ds, String type, int idx) {
	if(ds == null)return "" ;
	
	StringBuffer buf = new StringBuffer() ;
	int n_idx, task_idx ;
	String desc, offYN, timegap ;
	String active = "" ;
	
	while(ds.next()) {
		n_idx = ds.getInt(1) ;
		task_idx = ds.getInt(2) ;
		desc = ds.getString(3) ;
		offYN = ds.getString(4) ;
		timegap = ds.getString(5) ;
		
		if(idx == n_idx) active = "active" ;
		else active = "" ;
			
		if(offYN.equals("Y"))desc = "<strike style='color:silver'>"+desc+"</strike>" ;
		if( !"".equals(timegap) ) timegap = "<span style='color:gray;margin:0 0 0 10px'>"+timegap+"</span>" ;
			
		buf.append(String.format("<li class='%s'><a class='ellipsis' href='/jsp/task.jsp?tsk_idx=%d&type=%s&idx=%d'>%s</a>%s</li>",active, task_idx, type, n_idx, desc, timegap)) ;
	}
	ds = null ;
	
	return buf.toString() ;
}

private String getTaskLi(DataSet ds) {
	if(ds == null)return "" ;
	
	StringBuffer buf = new StringBuffer() ;
	int  task_idx ;
	String desc, offYN, timegap ;
	String active = "" ;
	
	while(ds.next()) {
		task_idx = ds.getInt(1) ;
		desc = ds.getString(2) ;
		offYN = ds.getString(3) ;
		timegap = ds.getString(4) ;
		
		if(offYN.equals("Y"))desc = "<strike style='color:silver'>"+desc+"</strike>" ;
		if( !"".equals(timegap) ) timegap = "<span style='color:gray;margin:0 0 0 10px'>"+timegap+"</span>" ;
			
		buf.append(String.format("<li><a class='ellipsis' href='/jsp/task.jsp?tsk_idx=%d'>%s</a>%s</li>", task_idx, desc, timegap)) ;
	}
	ds = null ;
	
	return buf.toString() ;
}

private String getLiRecently(int myIdx, RequestHelper req) {
	DataSet ds = QueryHandler.executeQuery("TEST_SELECT_RECENTLY", myIdx ) ;
	if(ds == null)return "" ;
	
	final String type = req.getParam("type", "") ;
	final int idx = req.getIntParam("idx", -1)	 ;
	boolean isSelectedType = "RECENTLY".equals(type) ;
	
	StringBuffer buf = new StringBuffer() ;
	int n_idx, task_idx ;
	String desc, offYN, timegap, tooltype, active="" ;
	
	while(ds.next()) {
		n_idx = ds.getInt(1) ;
		task_idx = ds.getInt(2) ;
		desc = ds.getString(3) ;
		timegap = ds.getString(4) ;
		tooltype = ds.getString(5) ;
		
		if(isSelectedType && n_idx == idx)active = "active" ;
		else active = "" ;
		
		if( "ACTIVITY".equals(tooltype) ) {
			desc = Html.Icon.ACTIVITY+" "+desc ;
		}
		else if( "FEEDBACK".equals(tooltype) ) {
			desc = Html.Icon.FEEDBACK+" "+desc ;
		}
		else if( "FILE".equals(tooltype) ) {
			desc = Html.Icon.FILE+" "+desc ;
		}
		
		// if( !"".equals(timegap) ) timegap = Html.small(timegap, "style='color:gray;margin:0 0 0 10px'") ; 
			
		buf.append(
			Html.li( Html.a( desc,String.format("href='/jsp/task.jsp?tsk_idx=%d&type=RECENTLY&idx=%d'",task_idx,n_idx)+" class=ellipsis")
					, String.format("class='%s'",active)  ) 
		) ;
	}
	ds = null ;
	
	return buf.toString() ;
}

public static class Html {
	// -- box - block 
	public static String div(String txt) { return div(txt,"") ; }
	public static String div(String txt,String attrs) { return markup("div",txt,attrs) ;}
	public static String p(String txt) { return p(txt,"") ; }
	public static String p(String txt,String attrs) { return markup("p",txt,attrs) ;}
	
	// -- box - inline
	public static String span(String txt) { return span(txt,"") ; }
	public static String span(String txt,String attrs) { return markup("span",txt,attrs) ;}
	
	// -- 
	public static String img_(String attrs) {
		return markupInline("img", attrs) ;
	}
	
	// -- link
	public static String a(String txt) { return a(txt,"") ; }
	public static String a(String txt,String attrs) { return markup("a",txt,attrs) ;}
	// -- table
	public static String table(String txt) { return table(txt,"") ; }
	public static String table(String txt,String attrs) { return markup("table",txt,attrs) ;}		
	public static String tr(String txt) { return tr(txt,"") ; }
	public static String tr(String txt,String attrs) { return markup("tr",txt,attrs) ;}
	public static String td(int txt) { return td(""+txt) ; }
	public static String td(int txt,String attrs) { return td(""+txt,attrs) ;}	
	public static String td(String txt) { return td(txt,"") ; }
	public static String td(String txt,String attrs) { return markup("td",txt,attrs) ;}

	
	// -- list
	public static String ul(String txt) { return ul(txt,"") ; }
	public static String ul(String txt,String attrs) { return markup("ul",txt,attrs) ;}	
	public static String li(String txt) { return li(txt,"") ; }
	public static String li(String txt,String attrs) { return markup("li",txt,attrs) ;}
	// -- font
	public static String small(String txt) { return small(txt,"") ; }
	public static String small(String txt,String attrs) { return markup("small",txt,attrs) ;}
	public static String strike(String txt) { return strike(txt,"") ; }
	public static String strike(String txt,String attrs) { return markup("strike",txt,attrs) ;}
	public static String em(String txt) { return em(txt,"") ; }	// italics
	public static String em(String txt,String attrs) { return markup("em",txt,attrs) ;}	// italics
	
	
	public static String strong(String txt) { return strong(txt,"") ; }
	public static String strong(String txt,String attrs) { return markup("strong",txt,attrs) ;}
	public static String b(String txt) { return b(txt,"") ; }
	public static String b(String txt,String attrs) { return markup("b",txt,attrs) ;}
	public static String i(String txt) { return i(txt,"") ; }
	public static String i(String txt,String attrs) { return markup("i",txt,attrs) ;}
	
	public static String h1(String txt) { return h1(txt,"") ; }
	public static String h1(String txt,String attrs) { return markup("h1",txt,attrs) ;}
	public static String h2(String txt) { return h2(txt,"") ; }
	public static String h2(String txt,String attrs) { return markup("h2",txt,attrs) ;}
	public static String h3(String txt) { return h3(txt,"") ; }
	public static String h3(String txt,String attrs) { return markup("h3",txt,attrs) ;}
	public static String h4(String txt) { return h4(txt,"") ; }
	public static String h4(String txt,String attrs) { return markup("h4",txt,attrs) ;}
	public static String h5(String txt) { return h5(txt,"") ; }
	public static String h5(String txt,String attrs) { return markup("h5",txt,attrs) ;}
	
	// -- br
	public static String br(String txt) { return br(txt,"") ; }
	public static String br(String txt,String attrs) { return markup("br",txt,attrs) ;}
	public static String br_() { return br_("") ; }
	public static String br_(String attrs) { return markupInline("br", attrs) ; }
	
	
	// -- markup core
	private static String markup(String nodeName, String txt, String attrs){ return String.format("<%s %s>%s</%s>",nodeName, attrs, txt, nodeName) ;}
	private static String markupInline(String nodeName, String attrs){ return String.format("<%s %s />",nodeName, attrs) ;}
	
	public static class Icon{
		public static final String TASK = i("","class=icon-tasks") ; // -- "<i class='icon-tasks'></i>" ;
		public static final String ACTIVITY = i("","class=icon-calendar") ; // -- "<i class='icon-calendar'></i>" ;
		public static final String FEEDBACK = i("","class=icon-comment") ; // -- "<i class='icon-comment'></i>" ;
		public static final String FILE = i("","class=icon-file") ; // -- "<i class='icon-file'></i>" ;
		public static final String OBSERVER = i("","class=icon-eye-open") ;
		public static final String FAVORITE = i("","class=icon-star") ; // -- "<i class='icon-star'></i>" ;
		public static final String USER = i("","class=icon-user") ; // -- "<i class='icon-user'></i>" ;
		public static final String HOME = i("","class=icon-home") ; // -- "<i class='icon-home'></i>" ;
        public static final String TRASH = i("","class=icon-trash") ; // -- "<i class='icon-trash'></i>" ;
		
		public static String get(String type) {
			if("TASK".equals(type)){
				return TASK ;
			}
			else if("ACTIVITY".equals(type)){
				return ACTIVITY ;
			}
			else if("FEEDBACK".equals(type)){
				return FEEDBACK ;
			}
			else if("FILE".equals(type)){
				return FILE ;
			}
			else if("OBSERVER".equals(type)){
				return OBSERVER ;
			}
			else {
				return "" ;
			}
		}
	}
	
	// --
	public static String trueString(boolean statement, String trueText) {
		return trueString(statement,trueText,"") ;
	}	
	public static String trueString(boolean statement, String trueText, String falseText) {
		return (statement?trueText:falseText) ;
	}
}

%><%!
// -- same with calendarEnabled
// -- for user combo
class UserCombo {
	String n_idx ;
	String v_email ;
	String v_name ;
	
	public UserCombo (DataSet ds) {
		this.n_idx = ds.getString(1) ;
		this.v_email = ds.getString(2) ;
		this.v_name = ds.getString(3) ;
	}

	public String get() {
		// -- task_idx를 경로에 노출하지 않는 방법은?
		return "<option value='"+n_idx+"'>"+v_name+"("+v_email+")</option>" ;
	}
}

//-- for user combo
class User {
	boolean isChecked ;
	String n_idx ;
	String v_email ;
	String v_name ;
	
	public User (DataSet ds) {
		this.isChecked = "Y".equals( ds.getString(1) ) ;
		this.n_idx = ds.getString(2) ;
		this.v_email = ds.getString(3) ;
		this.v_name = ds.getString(4) ;
	}

	public String get() {
		// -- return "<label class='checkbox inline'><input name='pObserver' type='checkbox' value='"+n_idx+"' id='inlineCheckbox1' "+Html.trueString(isChecked," checked")+"/>"+ v_name+  " </label>";
		return // Html.trueString(!isChecked,);	// 로직 수정 필요 우선 스킵 
				"<label class='checkbox inline'><input name='pObserver' type='checkbox' value='"+n_idx+"' id='inlineCheckbox1'/>"+ v_name+  " </label>" ; 
	}
}

//-- user combo
public String getUserCheckBox(UserSession oUserSession,int TASK_IDX) {	// -- 이미 참조자로 등록돼 있는 사람과 본인은 참조자에서 제외돼야 함.
	Object[] param = new Object[]{oUserSession.getUserIdx(), TASK_IDX} ;
	DataSet dsUsers = QueryHandler.executeQuery("TEST_SELECT_USER_FOR_OBSERVER", param) ;
	StringBuffer combo = new StringBuffer() ;
	combo.append("<div id='observerCheckList' class='control-group'>")
			.append("<label class='control-label' for='userCombo'>참조자 할당</label>")
			.append(	"<div class='controls'>");
			String userList = "";
			
			if(dsUsers != null) {
				User user = null ;
		 	 	while (dsUsers.next()) {
		 	 		user = new User(dsUsers) ;
		 	 		userList += user.get() ;
				}
		 	 	dsUsers = null ;
			}
			
			combo.append(userList)
			
			.append(	"</div>")
			.append("</div>") ;
	return combo.toString() ;
}

public String getUserCombo(UserSession oUserSession){
	// -- TODO - 사용자 정보 가져오기 - 이거 자주 쓰는건데 매번 쿼리해오기 부담되네. 사용자 정보가 바뀔 때만 파일로 떨구는건 어떨까.
	DataSet dsUsers = QueryHandler.executeQuery("SELECT_USER_LIST4_WITH_ME"
			,new Object[] { oUserSession.getUserIdx(), oUserSession.getUserIdx() }) ;
	
	String userList = "<option value='-1'>없음</option>" ;
	if(dsUsers != null) {
		UserCombo user = null ;
 	 	while (dsUsers.next()) {
 	 		user = new UserCombo(dsUsers) ;
 	 		userList += user.get() ;
		}
 	 	dsUsers = null ;
	}
	
	return userList ;	
}
%>
