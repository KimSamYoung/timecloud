<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ page trimDirectiveWhitespaces="true" %>
<%@page import="com.twobrain.common.session.UserMonitor" %>
<%@ page import="com.twobrain.common.core.DataSet" %>
<%@ page import="com.twobrain.common.core.QueryHandler" %>
<%@ page import="com.twobrain.common.session.UserSession" %>
<%@ page import="com.twobrain.common.config.Config" %>
<%@ page import="com.twobrain.common.constants.Cs" %>
<%@ page import="java.util.Vector,java.util.regex.*" %>
<%@ page import="com.twobrain.common.util.*" %>
<%@ page import="com.twobrain.dao.*" %>
<%@ page import="java.util.List" %>
<%
    final String CONTEXT_PATH = request.getContextPath();
    final String CONTEXT_REAL_PATH = request.getRealPath(CONTEXT_PATH);
    final String JS_PATH = CONTEXT_PATH + "/html/js";
    final String CSS_PATH = CONTEXT_PATH + "/html/css";
    final String IMG_PATH = CONTEXT_PATH + "/html/images";
    final String AXISJ_PATH = CONTEXT_PATH + "/html/axisj";
    final String NOTIFICATION_SERVER_URL = Config.getProperty("init", "NOTIFICATION_SERVER_URL");

    // --
    final String SNS_YAMMER = "YM";
    final String SNS_GC = "GC";

    String CLIENT_ID = "";
    String CLIENT_SECRET = "";

    String sHostName = request.getRequestURL().toString();

    // -- For Developing
    if (sHostName.contains("localhost")) {
        sHostName = "http://dev.2brain.com";
    }

    sHostName = sHostName.replace("http://", "");

    int startIndex = sHostName.indexOf('.') + 1;
    int endIndex = sHostName.indexOf(':');

    if (endIndex == -1) {
        endIndex = sHostName.indexOf('/');
        if (endIndex == -1) {
            endIndex = sHostName.length();
        }
    }

    sHostName = sHostName.substring(startIndex, endIndex);
%><%!
    // -- Util Class
    public static String stringToHTMLString(String string) {
        StringBuffer sb = new StringBuffer(string.length());
        // true if last char was blank
        boolean lastWasBlankChar = false;
        int len = string.length();
        char c;

        for (int i = 0; i < len; i++) {
            c = string.charAt(i);
            if (c == ' ') {
                // blank gets extra work,
                // this solves the problem you get if you replace all
                // blanks with &nbsp;, if you do that you loss
                // word breaking
                if (lastWasBlankChar) {
                    lastWasBlankChar = false;
                    sb.append("&nbsp;");
                } else {
                    lastWasBlankChar = true;
                    sb.append(' ');
                }
            } else {
                lastWasBlankChar = false;
                //
                // HTML Special Chars
	            /*
	            if (c == '"')
	                sb.append("&quot;");
	            else if (c == '\'')	// -- single quotation
	            	sb.append("&#39;") ;
	            else if (c == ',')
	            	sb.append("&#44") ; 	// -- comma - flash chart
	            else if (c == '&')
	                sb.append("&amp;");
	           */
                if (c == '\n') {
                    // Handle Newline
                    //sb.append("&lt;br/&gt;");
                    sb.append("<br />");
                } else if (c == '<')
                    sb.append("&lt;");
                else if (c == '>')
                    sb.append("&gt;");
                else {
                    int ci = 0xffff & c;
                    if (ci < 160)
                        // nothing special only 7 Bit
                        sb.append(c);
                    else {
                        // Not 7 Bit use the unicode system
                        sb.append("&#");
                        sb.append(new Integer(ci).toString());
                        sb.append(';');
                    }
                }
            }
        }
        return sb.toString();
    }

    // -- TODO - ProfileImage Class 필요 - 태스크 온/오프 사용자 표시, 사용자 온/오프 표시 일괄처리 필요
    public static String getProfileImage(String n_owner_idx) {
        return getProfileImage(Integer.parseInt(n_owner_idx));
    }

    public static String getProfileImage(int n_owner_idx) {
        return getProfileImage(n_owner_idx, 50, "", false);
    }

    public static String getProfileImage(int n_owner_idx, boolean isGrayScale) {
        return getProfileImage(n_owner_idx, 50, "", isGrayScale);
    }

    public static String getProfileImage(int n_owner_idx, int width, boolean isGrayScale) {
        return getProfileImage(n_owner_idx, width, "", isGrayScale);
    }

    public static String getProfileImage(int n_owner_idx, int width) {
        return getProfileImage(n_owner_idx, width, "", false);
    }

    public static String getProfileImage(int n_owner_idx, int width, String imageShape) {
        return getProfileImage(n_owner_idx, width, imageShape, false);
    }

    public static String getProfileImage(int n_owner_idx, int width, String imageShape, boolean isGrayScale) {
        if (n_owner_idx <= 0) return null;
        if (width <= 0) width = 50;

        if (imageShape == null || "".equals(imageShape))
            imageShape = ImageShape.NORMAL;    // -- rounded, polaroid, circle

        String profileImageUrl = getProfileImageUrl(n_owner_idx);
        if (isGrayScale) {
            profileImageUrl += "_g";
        }

        return String.format("<img src='%s' onerror=\"this.src='/html/images/avatar.png'\" class='%s' width='%spx' height='%spx' />", profileImageUrl, imageShape, width, width);
    }

    public static String getProfileImageUrl(int n_owner_idx) {
        return String.format(Config.getProperty("init", Cs.USER_PROFILE_IMAGE_URN), n_owner_idx);
    }

    public static class ImageShape {
        public static final String NORMAL = "";
        public static final String ROUNDED = "img-rounded";
        public static final String POLAROID = "img-polaroid";
        public static final String CIRCLE = "img-circle";
    }


    public static String addLink(String src) {
        String regex = "([\\p{Alnum}]+)://([a-z0-9.\\-&/%=?:@#$(),.+;~\\_]+)";

        Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(src);

        String result = "";

        if (src.contains("https")) {
            result = m.replaceAll("<a href='https://$2' target=_blank>https://$2</a>");
        } else {
            result = m.replaceAll("<a href='http://$2' target=_blank>http://$2</a>");
        }

        return result;
    }
%><%!
    // -- KPI - wrapper functions for GLOBAL RANK
    public String getTaskRank(UserSession oUserSession) {
        return getRankTable(oUserSession, "KPI_TASK_RANK");
    }

    public String getTaskAssginRank(UserSession oUserSession) {
        return getRankTable(oUserSession, "KPI_TASK_ASSIGN_RANK");
    }

    public String getFeedbackRankTable(UserSession oUserSession) {
        return getRankTable(oUserSession, "KPI_FEEDBACK_RANK");
    }

    public String getFileRankTable(UserSession oUserSession) {
        return getRankTable(oUserSession, "KPI_FILE_RANK");
    }

    public String getActivityRankTable(UserSession oUserSession) {
        return getRankTable(oUserSession, "KPI_ACTIVITY_RANK");
    }

    public String getObserverRankTable(UserSession oUserSession) {
        return getRankTable(oUserSession, "KPI_OBSERVER_RANK");
    }

    // -- KPI - wrapper functions for TEAM RANK
    public String getTaskTeamRank(UserSession oUserSession, String team_idx) {
        return getRankTable(oUserSession, "KPI_TASK_RANK_TEAM", new String[]{team_idx});
    }

    public String getTaskAssginTeamRank(UserSession oUserSession, String team_idx) {
        return getRankTable(oUserSession, "KPI_TASK_ASSIGN_RANK_TEAM", new String[]{team_idx});
    }

    public String getFeedbackTeamRankTable(UserSession oUserSession, String team_idx) {
        return getRankTable(oUserSession, "KPI_FEEDBACK_RANK_TEAM", new String[]{team_idx});
    }

    public String getFileTeamRankTable(UserSession oUserSession, String team_idx) {
        return getRankTable(oUserSession, "KPI_FILE_RANK_TEAM", new String[]{team_idx});
    }

    public String getActivityTeamRankTable(UserSession oUserSession, String team_idx) {
        return getRankTable(oUserSession, "KPI_ACTIVITY_RANK_TEAM", new String[]{team_idx});
    }

    public String getObserverTeamRankTable(UserSession oUserSession, String team_idx) {
        return getRankTable(oUserSession, "KPI_OBSERVER_RANK_TEAM", new String[]{team_idx});
    }

    // --
    public String getRankTable(UserSession oUserSession, String query) {
        return getRankTable(oUserSession, query, null);
    }

    public String getRankTable(UserSession oUserSession, String query, String[] params) {
        DataSet dsRank = null;
        if (params != null) dsRank = QueryHandler.executeQuery(query, params);
        else dsRank = QueryHandler.executeQuery(query);

        StringBuffer rankImages = new StringBuffer();
        StringBuffer rankTitles = new StringBuffer();
        String rankTable = null;

        String[] rankCaption = {"1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th"};
        int rank = 0;
        // -- System.out.println("size = "+dsRank.size())	 ;
        if (dsRank != null && dsRank.size() > 0) {
            while (dsRank.next() && rank < rankCaption.length) {    // --
                rankImages.append("<td align=center>" + getProfileImage(dsRank.getInt(1), 30) + "</td>");
                rankTitles.append("<td align=center><small>" + rankCaption[rank++] + "(" + dsRank.getInt(2) + ")</small></td>");
            }

            rankTable = "<table><tr>" + rankImages.toString() + "</tr>"
                    + "<tr>" + rankTitles.toString() + "</tr></table>";
        } else rankTable = "No rank Info ..";

        return rankTable;
    }
%><%! // UPDATE TASK METHOD

    public static void setTaskUpdateTime(final int taskIdx) {
        if (taskIdx <= 0) return;
        if (QueryHandler.executeUpdate("UPDATE_TASK_EDIT_DATETIME", taskIdx) <= 0) {
            // -- fail to update edt time
        }
    }

    private String getNotification(UserSession oUserSession, String Class) {
        // -- notification
        int notifiCount = 20;
        DataSet ds = QueryHandler.executeQuery("TEST_SELECT_MYNOTIFICATION", new String[]{Integer.toString(oUserSession.getUserIdx()),"1","10"});

        StringBuffer result = new StringBuffer();
        String desc, timegap, v_tbl_nm;
        int task_idx, creator_idx, n_tbl_idx;
        int i = 0;
        String msg = "";
        int len = ds.size();
        if (ds != null && len > 0) {
            if (len <= notifiCount) notifiCount = len;
            while (i++ < notifiCount) {
                ds.next();
                task_idx = ds.getInt(1);
                desc = ds.getString(2);
                creator_idx = ds.getInt(3);
                timegap = ds.getString(4);
                v_tbl_nm = ds.getString(5);
                n_tbl_idx = ds.getInt(6);

                if ("TIMECLOUD_FEEDBACK".equals(v_tbl_nm)) {
                    msg = "%s님이 피드백을 남기셨습니다.";
                } else if ("TIMECLOUD_ACTIVITY".equals(v_tbl_nm)) {
                    msg = "%s님이 일정을 등록하셨습니다.";
                } else if ("TIMECLOUD_FILE".equals(v_tbl_nm)) {
                    msg = "%s님이 파일을 업로드하였습니다.";
                } else if ("TIMECLOUD_TASK".equals(v_tbl_nm)) {
                    msg = "%s님이 태스크를 할당하였습니다.";
                } else {
                }

                String sProfileImageSrc = getProfileImageUrl(creator_idx);
                result.append(
                        Html.li(
                                Html.a(Html.img_("class='media-object' src='" + sProfileImageSrc + "' width=50"), "class='pull-left'") +
                                        Html.div(
                                                Html.div(Html.a(desc, "href='/jsp/task.jsp?tsk_idx=" + task_idx + "'"))
                                                , "class='media-body messageBody'")
                                , "class='media' ")
                );
            }
        }

        String Loading = "<div id='notificationLoading' style='display:none'>" +
                "<p style='text-align:center;'><img src='/html/images/loading.gif'/></p>" +
                "</div>";

        return "<div class='" + Class + "' style='margin-left:0px;position:fixed;top:0px;right:0px' listCount='" + notifiCount + "'> " + Html.ul(result.toString(), "class='media-list'") + Loading + "</div>";
    }

    // --
    private String getVertNav(RequestHelper req, UserSession oUserSession) {
        final String type = req.getParam("type", "");
        final int idx = req.getIntParam("idx", -1);
        String homeActive = "", calendarActive = "", feedbackActive = "", fileActive = "", taskActive = "";

        int pIdx = -1, rIdx = -1, fIdx = -1;
        if ("RECENTLY".equals(type)) {
            rIdx = idx;
        } else if ("FAVORITE".equals(type)) {
            fIdx = idx;
        } else if ("PROJECT".equals(type)) {
            pIdx = idx;
        } else {
            HttpServletRequest request = req.getRequestObject();
            String url = request.getRequestURL().toString();

            int pos = url.lastIndexOf('/');
            if (pos > 0) {
                String urn = url.substring(pos + 1);
                if (urn.equals("main.jsp")) homeActive = "active";
                else if (urn.equals("feedbackAll.jsp")) feedbackActive = "active";
                else if (urn.equals("calendarAll.jsp")) calendarActive = "active";
                else if (urn.equals("fileAll.jsp")) fileActive = "active";
                else if (urn.equals("taskList.jsp")) taskActive = "active";
            }
        }

        final int myIdx = oUserSession.getUserIdx();
//        DataSet ds = QueryHandler.executeQuery("TEST_SELECT_PROJECT_ON", myIdx);
//        String myProject = getLi(ds, "PROJECT", pIdx);

        // ds = QueryHandler.executeQuery("TEST_SELECT_MYFAVORITE", myIdx) ;
        String myFavorite = getLiFavorite(myIdx, req); //getLi(ds,"FAVORITE",fIdx) ;
        String myRecently = getLiRecently(myIdx, req);

        // TODO - 복수처리 필요
        StringBuffer sbTeam = new StringBuffer();
        List<TeamInfo> teams = TeamInfo.getTeams(Integer.toString(oUserSession.getUserIdx()), oUserSession.getDomainIdx());
        TeamInfo team = null;
        if (teams != null && teams.size() > 0) {
            team = teams.get(0);
            sbTeam.append(Html.h3(
                    Html.a(
                            String.format("%s 팀", team.getName())
                            , "href='/jsp/team/view.jsp?team_idx=" + team.getIdx() + "'")
                    , "class=nav-header"));
        } else {
            sbTeam.append(Html.span(Html.b("등록된 팀이 없습니다 ")+Html.a(Html.Icon.PLUS,"href='/jsp/team/list.jsp'"), "class=nav-header"));
        }

        return sbTeam + Html.ul(
                Html.li(Html.a(Html.Icon.HOME + "Home", "href='/'"), "class='" + homeActive + "'")
                        + Html.li(Html.a(Html.Icon.ACTIVITY + "Calendar", "href='/jsp/calendarAll.jsp'"), "class='" + calendarActive + "'")
                        + Html.li(Html.a(Html.Icon.FEEDBACK + "Feedback", "href='/jsp/feedbackAll.jsp'"), "class='" + feedbackActive + "'")
                        + Html.li(Html.a(Html.Icon.FILE + "File", "href='/jsp/fileAll.jsp'"), "class='" + fileActive + "'")
                        + Html.li(Html.a(Html.Icon.TASK + "Task", "href='/jsp/taskList.jsp'"), "class='" + taskActive + "'")
                        + Html.trueString((myFavorite != null),
                        Html.li("", "class='divider'")
                                + Html.li(Html.Icon.FAVORITE + "Favorite", "class='nav-header'")
                                + myFavorite)
//                        + Html.li("", "class='divider'")
//                        + Html.li("Project", "class='nav-header'")
//                        + myProject
                        + Html.li("", "class='divider'")
                        + Html.li("Recently", "class='nav-header'")
                        + myRecently
                        + Html.li("", "class='divider'")
                , "class='nav nav-list'");
    }

    private String getLiFavorite(int myIdx, RequestHelper req) {
        DataSet ds = QueryHandler.executeQuery("TEST_SELECT_MYFAVORITE", myIdx);
        if (ds == null || ds.size() < 1) return null;

        final String type = req.getParam("type", "");
        final int idx = req.getIntParam("idx", -1);
        boolean isSelectedType = "FAVORITE".equals(type);

        StringBuffer buf = new StringBuffer();
        int n_idx, task_idx, n_tbl_idx;
        String desc;
        String active = "";

        while (ds.next()) {
            n_idx = ds.getInt(1); // -- favorite idx
            task_idx = ds.getInt(2);
            desc = ds.getString(3);

            if (isSelectedType && idx == n_idx) active = "active";
            else active = "";

            buf.append(
                    String.format("<li class='%s'><a id='FAVORITE_%d' class='ellipsis' href='/jsp/task.jsp?tsk_idx=%d&type=FAVORITE&idx=%d'>%s</a></li>"
                            , active, n_idx, task_idx, n_idx, desc)
            );
        }

        return buf.toString();
    }

    // -- for tool snap list (main tool snap & task noti)
    private String getLi(DataSet ds, String type, int idx) {
        if (ds == null) return "";

        StringBuffer buf = new StringBuffer();
        int n_idx, task_idx;
        String desc, offYN, timegap;
        String active = "";

        while (ds.next()) {
            n_idx = ds.getInt(1);
            task_idx = ds.getInt(2);
            desc = ds.getString(3);
            offYN = ds.getString(4);
            timegap = ds.getString(5);

            if (idx == n_idx) active = "active";
            else active = "";

            if (offYN.equals("Y")) desc = "<strike style='color:silver'>" + desc + "</strike>";
            if (!"".equals(timegap)) timegap = "<span style='color:gray;margin:0 0 0 10px'>" + timegap + "</span>";

            buf.append(String.format("<li class='%s'><a class='ellipsis' href='/jsp/task.jsp?tsk_idx=%d&type=%s&idx=%d'>%s</a>%s</li>", active, task_idx, type, n_idx, desc, timegap));
        }
        ds = null;

        return buf.toString();
    }

    private String getLiRecently(int myIdx, RequestHelper req) {
        DataSet ds = QueryHandler.executeQuery("TEST_SELECT_RECENTLY", myIdx);
        if (ds == null) return "";

        final String type = req.getParam("type", "");
        final int idx = req.getIntParam("idx", -1);
        boolean isSelectedType = "RECENTLY".equals(type);

        StringBuffer buf = new StringBuffer();
        int n_idx, task_idx;
        String desc, offYN, timegap, tooltype, active = "";

        while (ds.next()) {
            n_idx = ds.getInt(1);
            task_idx = ds.getInt(2);
            desc = ds.getString(3);
            timegap = ds.getString(4);
            tooltype = ds.getString(5);

            if (isSelectedType && n_idx == idx) active = "active";
            else active = "";

            if ("ACTIVITY".equals(tooltype)) {
                desc = Html.Icon.ACTIVITY + " " + desc;
            } else if ("FEEDBACK".equals(tooltype)) {
                desc = Html.Icon.FEEDBACK + " " + desc;
            } else if ("FILE".equals(tooltype)) {
                desc = Html.Icon.FILE + " " + desc;
            }

            // if( !"".equals(timegap) ) timegap = Html.small(timegap, "style='color:gray;margin:0 0 0 10px'") ;

            buf.append(
                    Html.li(Html.a(desc, String.format("href='/jsp/task.jsp?tsk_idx=%d&type=RECENTLY&idx=%d'", task_idx, n_idx) + " class=ellipsis")
                            , String.format("class='%s'", active))
            );
        }
        ds = null;

        return buf.toString();
    }
%>