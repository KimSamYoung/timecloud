<%@ page import="java.text.SimpleDateFormat
				,java.text.NumberFormat
				,java.util.*
				,com.twobrain.chart.locale.*
				,com.twobrain.chart.util.DateTime
				,com.twobrain.chart.util.LocaleUtil
				,com.twobrain.chart.ChartUtil
				,com.twobrain.chart.Chart
				,com.twobrain.chart.ChartXml
				,com.twobrain.chart.api.IChartQueryHandler
				,com.twobrain.chart.factory.ChartQueryFactory
				,com.twobrain.chart.factory.ChartSessionFactory
				,com.twobrain.chart.api.IChartSessionHandler"  
%><%@ include file="incConstants.jspf"%>
<%!
// -- array (숫자) 값 정렬 - 사용예 (kpi_works_05,06,07,08)
	private Object[] sort(Object[] arr) {
		if( arr == null || arr.length <=0 )	return null ;
		
		Object[] out = arr ;
		
		int t = 0 ;
		Object tObj = null ;
		
		for (int i=0; i<out.length;i++) {
			tObj = out[i]  ;
			if ( parseInt(out[t]) > parseInt(tObj) ) {
				out[i] = out[t] ;
				out[t] = tObj ;
				t = i ;
			}
		}
		return out ;
	}

	private boolean isNumber ( Object s) {
		try {
			Double.parseDouble( ""+s ) ;
			return true ;
		}
		catch( NumberFormatException e) {
			//System.out.println(s) ;
			e.printStackTrace() ;
			return false ;
		}
	
	}	

	private String numberFormat( Object number ) {
		NumberFormat nf  =  NumberFormat.getInstance();
		nf.setMaximumFractionDigits(3);
		return nf.format( number );
	}

	private String doubleFormat ( Object number ) {
		return doubleFormat(number,2) ;
	}

	private String doubleFormat( Object number, int step ) {	// -- 소수점 몇 째자리까지 보여줄것인지
		String num = "" + number ;
		int len = num.length() ;
		int pos = num.indexOf('.') ;
		
		if(step == 0) {
			if(pos<0)return num ;
			
			return num.substring(0,pos) ;
		}
		
		if(pos < 0 && step>0) {
			num = num+"." ;
			for(int i=0;i<step;i++) {
				num += "0" ;
			}
			
			
		}
		else {	// -- point가 있는 경우임.
			int zcnt = len - pos - 1 ;	// -- 소수점 이하 자리수
			if(zcnt > step) {
				double tmp = parseDouble( number, step ) ;	// -- 재귀함수 적용 시 자리수 이하가 되므로 가능
				num = doubleFormat( tmp, step ) ;
			}
			else {
				//System.out.println(step-zcnt) ;
				for(int i=0;i<(step-zcnt);i++) {	// -- 모자란 0의 개수만큼 더한다.
					num += "0" ;
				}
			}
		}
		
		return num ;
	}
	
	private String parseDoubleString ( Object num ) {
		return parseDoubleString( num, 2) ;
	}
	
	private String parseDoubleString( Object num, int step ) {
		double tmp = parseDouble(num, step) ;
		String out = doubleFormat(tmp, step) ;
		
		return out ;
	}
	
	private double avg( Object num, Object cnt ) {
		if ( num == null ) return 0.00 ; if (cnt == null ) return 0.00 ;
		double total = parseDouble ( num ) ;
		double count = parseDouble ( cnt ) ;
		
		if(total <= 0 || count <= 0 ) return 0.00 ;
		
		double result = 0.00 ;
		
		result = total / count  ;
		result = Math.round( result*100 ) / 100.00 ;	// -- 자릿수 보정
		
		return result ;
	}
	
	private double parseDouble( Object num ) {
		return parseDouble( num, 2 ) ;	// -- default 자리수 2자리.
	}
	
	private double parseDouble( Object num, int step ) {
		if( num == null)return 0.00 ;
		double result = 0.00  ;
		try {
			double dbl = Double.parseDouble( ""+num ) ;
			
			if(step == 0) result = dbl ; // -- 자릿수 자르기 없이 보냄 
			else result = (Math.round(dbl*Math.pow(10,step)) / (Math.pow(10,step)));
		}
		catch (NumberFormatException nfe) {
			result = 0.00 ;			
		}

		return result;
	}
	
	private int parseInt (Object num) {
		if( num == null)return 0 ;
		int result = 0 ;
		try {
			result = Integer.parseInt(""+num) ;
		}
		catch(NumberFormatException nfe) {
			result = 0 ;			
		}
		return result ;
	}
	
	private double getRatio(Object obj1, Object obj2) {
		double num1 = parseDouble(obj1) ;
		double num2 = parseDouble(obj2) ;
		
		if(num2>0) return num1/num2*100 ;
		else return 0.00 ;
	}
	private String getRatioString(Object obj1, Object obj2) { // -- obj2 : 분모, obj1: 분자
		
		return parseDoubleString( getRatio(obj1,obj2) ) ;		
	}
	
	
	private String getReportTableId( int rowCnt ) {
		String reportTableId = "" ;
		if( rowCnt > __SCROLL_ROW_CNT__ )reportTableId = __REPORT_ID__	 ;
		
		return reportTableId ;
	}
	
	public static String __REPORT_ID__ = "reportTable" ;	// -- 스크롤뷰 표현을 위한 CSS ID임
	public static int __SCROLL_ROW_CNT__ = 20 ;
	
	// -- 
	public String getNoData( MessageBundle msg ) {
		if(msg == null)return null ;
		return getNoData( msg.getString("msg.no.data") ) ;
	}
	
	public String getNoData(String msg) {
		if(msg == null)msg="There is no data." ;
		String msgTable = "<table width='100%' border='0' cellspacing='0' cellpadding='0' class='table_tip'><tr onMouseOut=\"this.style.backgroundColor=''\" onMouseOver=\"this.style.backgroundColor='#F2F2F4'\"><td align='center' height='30' colspan='9' style='overflow:hidden;'  ><nobr>"
		+ msg
		+"</nobr></td></tr></table>" ;
		return msgTable ;	
	}
/**/
	public static String stringToHTMLString(String string) {
	    StringBuffer sb = new StringBuffer(string.length());
	    // true if last char was blank
	    boolean lastWasBlankChar = false;
	    int len = string.length();
	    char c;
	
	    for (int i = 0; i < len; i++)
	        {
	        c = string.charAt(i);
	        if (c == ' ') {
	            // blank gets extra work,
	            // this solves the problem you get if you replace all
	            // blanks with &nbsp;, if you do that you loss 
	            // word breaking
	            if (lastWasBlankChar) {
	                lastWasBlankChar = false;
	                sb.append("&nbsp;");
	                }
	            else {
	                lastWasBlankChar = true;
	                sb.append(' ');
	                }
	            }
	        else {
	            lastWasBlankChar = false;
	            //
	            // HTML Special Chars
	            if (c == '"')
	                sb.append("&quot;");
	            else if (c == '\'')	// -- single quotation 처리
	            	sb.append("&#39;") ;
	            /*else if (c == ',')
	            	sb.append("&#44") ; 	// -- comma 처리 - flash chart에서 &#44 그대로 찍힘 */
	            else if (c == '&')
	                sb.append("&amp;");
	            else if (c == '<')
	                sb.append("&lt;");
	            else if (c == '>')
	                sb.append("&gt;");
	            else if (c == '\n')
	                // Handle Newline
	                sb.append("&lt;br/&gt;");
	            else {
	                int ci = 0xffff & c;
	                if (ci < 160 )
	                    // nothing special only 7 Bit
	                    sb.append(c);
	                else {
	                    // Not 7 Bit use the unicode system
	                    sb.append("&#");
	                    sb.append(new Integer(ci).toString());
	                    sb.append(';');
	                    }
	                }
	            }
	        }
	    return sb.toString();
	}

	// 문자열 자르기
	public String cutCharLen(String xxx, int limit) { 
        if(limit < 4 ) { 
    	    return xxx; 
        }

        int strlen = 0; 
        char c; 
        StringBuffer rtnStrBuf = new StringBuffer(); 
        for(int j = 0; j < xxx.length(); j++) { 
        	c = xxx.charAt(j); 
            if ( c < 0xac00 || 0xd7a3 < c ) { 
            	strlen++; 
            } else { 
            	strlen+=2; //2Byte
            }

            rtnStrBuf.append(c); 

            if (strlen>limit-3)  { 
                rtnStrBuf.append("..."); 
                break; 
            } 
        } 

        return rtnStrBuf.toString(); 
	}
	
	// -- null을 체크하여 빈문자열로 변환 (2012.02.06 권태우 추가)
	public String chkNull(String str) {
		if( (str == null) || (str == "null") || (str == "") ) {
			return "";
		}else {
			return str;
		}
	}
	
	// KSC5601를 8859_1로 인코딩
	public String k2a(String str) {
		String sResult = null;
		if(str == null) return "";
		
		try {
			sResult = new String(str.getBytes("KSC5601"), "8859_1");
		}catch(java.io.UnsupportedEncodingException e) {
			System.err.println(e.toString());
		}
		
		return sResult;
	}

	// 8859_1를 KSC5601로 인코딩
	public String a2k(String str) {
		String sResult = null;
		if(str == null) return "";
		
		try {
			sResult = new String(str.getBytes("8859_1"), "KSC5601");
		}catch(java.io.UnsupportedEncodingException e) {
			System.err.println(e.toString());
		}
		
		return sResult;
	}
	
	// 토큰나이져(String, Spliter)
	public String[] splitString(String str, String split) {  		
        StringTokenizer token = new StringTokenizer(str , split);
        int ii = 0;
        String[] replace = new String[ token.countTokens()];
        while ( token.hasMoreTokens()) {
            replace[ii] = token.nextToken();
            ii++;
        }                
        return replace;
	}
	
	// yyyymmdd 형식과 원하는 구분자로 받아서 yyyy mm dd 으로(구분자로 셋팅해서) 셋팅하여 돌려준다.
	public String tranSomeday(String day, String gb) {  
		String days = "";
		try {
			days = day.substring(0,4)+gb+day.substring(4,6)+gb+day.substring(6,8);
		} catch (Exception e) { days = ""; }
			
		return days;
	}
	
	// hhMMss 형식과 원하는 구분자로 받아서 hh MM ss 으로(구분자로 셋팅해서) 셋팅하여 돌려준다.
	public String tranSometime(String time, String gb) {  
		String times = "";
		try {
			times = time.substring(0,2)+gb+time.substring(2,4)+gb+time.substring(4,6);
		} catch (Exception e) { times = ""; }
			
		return times;
	} 
%><%
IChartSessionHandler chartSessionHandler = ChartSessionFactory.getChartSessionHandler(request) ;
if(!chartSessionHandler.checkSession())return ;
		
String timeZone = chartSessionHandler.getTimeZone() ; // -- (String)session.getAttribute("timeZone");
String localeCode = chartSessionHandler.getLocaleCode() ; // -- (String)session.getAttribute("localeCode");

// -- 기본 파라메터  - 기간 검색 변수 처리
String sDate = "";
String eDate = "";	
String todayTime = "";

sDate = request.getParameter("sdate");
eDate = request.getParameter("edate");

if(sDate.indexOf("/") > -1) { sDate = sDate.replaceAll("/", ""); }  
if(eDate.indexOf("/") > -1) { eDate = eDate.replaceAll("/", ""); }

// ##############################################################################
/*
timeZone = (String)session.getAttribute("timeZone");
localeCode = (String)session.getAttribute("localeCode");
*/

if ( null == timeZone || timeZone.trim().equals("") ) {
	out.clear();
	out.print("session-time-out");
	return;
}

// ##############################################################################

todayTime = request.getParameter("todayTime");

// 서버타임과의 시간차
String intervalTime = DateTime.getIntervalTimeZone(timeZone) + "";
		
sDate = LocaleUtil.getViewToDB(sDate + todayTime, intervalTime);
eDate = LocaleUtil.getViewToDB(eDate + todayTime, intervalTime);

String[] param = new String[] {sDate, eDate, localeCode} ;

//-- 확장  파라메터 (각 JSP 별  파라메터)
String params = request.getParameter("params") ;
String[] param_ext = null ;
if( params != null && !"".equals(params) && !"null".equals(params) ) {
	// System.out.println("params="+params) ;
	// -- '^' 로 구분되면 params에 담기는 내용들은 각 report jsp에서 알아서 정의 및 파싱한다.
	if ( params.indexOf(__PARAM_EXT_DELIM__) > -1 ) {
		// -- param_ext = params.split( "\\"+__PARAM_EXT_DELIM__ ) ;	// -- Delimeter가 정규식 예약문자 일 경우(^,$,*,| 등 일 경우, 역슬래시2개 사용)
		param_ext = params.split( ""+__PARAM_EXT_DELIM__ ) ;
	}
	else param_ext = new String[]{ params } ;
}

// -- System.out.println ("param_ext"+ param_ext ) ;

// SNA MessageBundle (2011.11.28)
String resourceCode = "kpi";   // reserved for CELLO STAT.

//MessageBundle msg = KpiLocale.getMessageBundle(localeCode, resourceCode);
// out.println("MessageBundle Test Msg => " + msg.getString("rsc.test.msg"));

// -- 2012.02.09 권태우 추가(조회일자를 화면에 Display 뿌려주는 용도로 사용됨)
String displayDate = "Period : " + tranSomeday(param[0].substring(0,8),"/") + " ~ " + tranSomeday(param[1].substring(0,8),"/");
%>